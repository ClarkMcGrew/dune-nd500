#!/bin/bash
#
#  Build a release.  This takes a single argument which is the release
#  version.  For example
#
#  ndx-release release@develop
#  ndx-release release@3.1.4
#  ndx-release production@1.0.0
#
# This can create a spack "view" in ${NDX_SPACK_ROOT}/releases/. For
#  example,
#
#  ndx-release release@0.0.0
#
# will create
#
# ${NDX_SPACK_ROOT}/releases/release@0.0.0~<architecture>/
#
# OPTIONS:
#
#   -l -- Make a local installation in the current directory.  The
#           only difference between a local and standard installation
#           is that the standard installation is in
#           "${NDX_SPACK_ROOT}/releases/", and a local installation
#           isn't.
#   -v -- Be verbose in the build.
#   -q -- Be quiet during the build.
#   -j<n> -- Set the number of CPU to be used (default is 1).
#   -t -- Create a tree.  This can be used as a release.

if [ ${#NDX_SPACK_ROOT} == 0 ]; then
    echo Need to setup dune-ndx.
    exit 1
fi

verbosity="-v"
job_count="${SPACK_JOBS}"
make_tree="yes"

function usage() {
    echo usage: $(basename $0) spec
    echo
    echo "   -h   -- This help message."
    echo "   -j<n> -- Set --jobs to <n> (Default: ${job_count})."
    echo "   -l   -- Install the release into the current directory."
    echo "   -v   -- Be verbose (Default: ${verbosity})."
    echo "   -q   -- Be quiet."
    echo "   -t   -- Don't build the release tree."
    echo
    echo "Install a release chosen according to spec.  The spec must select"
    echo "a unique release, and you can list the available ones with"
    echo "'spack find'.  By default, the release will be installed into the"
    echo "'\${NDX_SPACK_ROOT}/releases' directory."
}

# Set the default location for the release.
while getopts j:lhqtv opt; do
    case $opt in
	j) job_count="--jobs=${OPTARG}";;
	l) release_base="${PWD}";;
	q) verbosity="";;
	v) verbosity="-v";;
	t) make_tree="no";;
	h) usage; exit 0;;
    esac
done
shift $(($OPTIND - 1))

release_version=${1}
shift

# Clean up the environment.  This makes sure that some of the
# important variables are not set.
unset LD_LIBRARY_PATH
unset CC
unset CXX
unset NDX_ROOT

echo Installing packages needed for ${release_version}
spack install --clean --keep-stage ${job_count} ${verbosity} ${release_version}

release_install=$(spack location -i ${release_version})
if [ ${#release_install} == 0 ]; then
    echo Did not install ${release_version}
    exit 1
fi

if [ ${make_tree} == "no" ]; then
    echo Did not make a release tree for ${release_version}
    echo Use environment modules to access release.  Also
    echo ndx-setup ${release_version}
    echo will make the release available.
    exit 0
fi

# Check if we should use the default release location.
if [ ${#release_base} == 0 ]; then
    release_base="${NDX_SPACK_ROOT}/releases"
fi

# Figure out the release architecture and the full release directory.
release_arch=$(spack arch)
release_dir="${release_base}/${release_version}~${release_arch}"

# Make sure the release directory exists and go there.

mkdir -p ${release_base}
cd ${release_base}

# Make sure that the release directory does not exist.
rm -rf ${release_dir}

echo Making release ${release_version} available
spack view ${verbosity} hardlink ${release_dir} ${release_version} 

# Copy over the standard setup template so that the ndx-setup script
# can automatically set the paths.
cp ${NDX_SPACK_ROOT}/scripts/setup.template ${release_dir}/setup.sh

echo Installed in "${release_dir}"


